// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_mixer.djinni

package com.github.piasy.audio_mixer;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class AudioMixerApi {
    public static final int MAX_BUF_SIZE = 7680;

    public static final int SAMPLE_SIZE = 2;

    public abstract void updateVolume(int ssrc, float volume);

    public abstract boolean addSource(MixerSource source);

    public abstract boolean removeSource(int ssrc);

    public static AudioMixerApi create(MixerConfig config)
    {
        return CppProxy.create(config);
    }

    static final class CppProxy extends AudioMixerApi
    {
        final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void updateVolume(int ssrc, float volume)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_updateVolume(this.nativeRef, ssrc, volume);
        }
        private native void native_updateVolume(long _nativeRef, int ssrc, float volume);

        @Override
        public boolean addSource(MixerSource source)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_addSource(this.nativeRef, source);
        }
        private native boolean native_addSource(long _nativeRef, MixerSource source);

        @Override
        public boolean removeSource(int ssrc)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_removeSource(this.nativeRef, ssrc);
        }
        private native boolean native_removeSource(long _nativeRef, int ssrc);

        public static native AudioMixerApi create(MixerConfig config);
    }
}
