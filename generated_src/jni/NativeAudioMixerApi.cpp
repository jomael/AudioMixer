// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_mixer.djinni

#include "NativeAudioMixerApi.hpp"  // my header
#include "Marshal.hpp"
#include "NativeMixerConfig.hpp"
#include "NativeMixerSource.hpp"

namespace djinni_generated {

NativeAudioMixerApi::NativeAudioMixerApi() : ::djinni::JniInterface<::audio_mixer::AudioMixerApi, NativeAudioMixerApi>("com/github/piasy/audio_mixer/AudioMixerApi$CppProxy") {}

NativeAudioMixerApi::~NativeAudioMixerApi() = default;


CJNIEXPORT void JNICALL Java_com_github_piasy_audio_1mixer_AudioMixerApi_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::audio_mixer::AudioMixerApi>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_github_piasy_audio_1mixer_AudioMixerApi_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/, jobject j_config)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::audio_mixer::AudioMixerApi::Create(::djinni_generated::NativeMixerConfig::toCpp(jniEnv, j_config));
        return ::djinni::release(::djinni_generated::NativeAudioMixerApi::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_github_piasy_audio_1mixer_AudioMixerApi_00024CppProxy_native_1updateVolume(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_ssrc, jfloat j_volume)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::audio_mixer::AudioMixerApi>(nativeRef);
        ref->UpdateVolume(::djinni::I32::toCpp(jniEnv, j_ssrc),
                          ::djinni::F32::toCpp(jniEnv, j_volume));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_com_github_piasy_audio_1mixer_AudioMixerApi_00024CppProxy_native_1addSource(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_source)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::audio_mixer::AudioMixerApi>(nativeRef);
        auto r = ref->AddSource(::djinni_generated::NativeMixerSource::toCpp(jniEnv, j_source));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_github_piasy_audio_1mixer_AudioMixerApi_00024CppProxy_native_1removeSource(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_ssrc)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::audio_mixer::AudioMixerApi>(nativeRef);
        auto r = ref->RemoveSource(::djinni::I32::toCpp(jniEnv, j_ssrc));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
